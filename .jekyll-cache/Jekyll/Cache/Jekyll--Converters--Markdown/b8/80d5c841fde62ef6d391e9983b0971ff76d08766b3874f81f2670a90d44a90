I"ä)<p><img src="http://localhost:4000/assets/images/post/sass-vs-css.webp" alt="SASS-1" /></p>

<h3 id="styling-web-dengan-sass">Styling web dengan SASS</h3>
<p>Hai Coders ! Apa kabarnya ? 
Semoga sehat-sehat selalu. 
Dalam artikel kali ini gout mau bahas mengenai sass, sass adalah tools atau library yang melengkapi kebutuhan dalam kerangka design. melengkapi kinerja css (cascading stylesheet) yaitu format scripting untuk menambahkan styling bagi keperluan web design dalam hal ini juga bisa di sematkan kepada front end web developer. SASS menjadi tools pelengkap para developer web era milenial.</p>

<h4 id="apa-itu-sass-">Apa itu SASS ?</h4>
<p>SASS merupakan singkatan dari Syntactically Awesome Style Sheets. SASS adalah sebuah bahasa pra-prosesor (preprocessor) untuk CSS.</p>

<p>SASS bukanlah bahasa pemrograman, SASS tools library , scripting untuk melengkapi kerangka design dari css.<br />
so untuk developer web dengan skala yang besar dan design yang kompleks mungkin sass bisa sangat bermanfaat. gout sendiri baru baru ini mulai tertarik menggunakan SASS, dan itu terasa memudahkan sekali dalam proses mendesign sebuah project khususnya web development.</p>

<h3 id="memulai-sass">Memulai SASS</h3>
<p>dalam project artikel kali ini gout masih menggunakan <code class="language-plaintext highlighter-rouge">Node.js</code> untuk membuat project web. dalam project kali ini gout mencoba menambahkan module untuk SASS di <code class="language-plaintext highlighter-rouge">Node.js</code> yaitu <code class="language-plaintext highlighter-rouge">node-sass</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>install sass
npm install node-sass --savev
</code></pre></div></div>
<p>kemudian buat direktori baru di root direktori project kita dengan nama <code class="language-plaintext highlighter-rouge">sass</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p sass
chmod 777 sass/.*
touch sass/index.scss
touch sass/_layout.scss
touch sass/_color.scss
</code></pre></div></div>
<p>mungkin untuk sebagian orang SASS adalah hal baru, sama seperti gout waktu pertama mengenal SASS, dilihat dari format ekstensi file nya yaitu <code class="language-plaintext highlighter-rouge">.scss</code> .</p>
<h4 id="kenapa-scss">Kenapa SCSS</h4>
<p>Menurut penjelasan <a href="https://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better">thesassway</a>, awalnya syntax SASS cukup sulit difahami. karena sangat berbeda jauh dengan <code class="language-plaintext highlighter-rouge">css</code> biasa.  seperti berikut ini perbedaan dari syntax SASS dan SCSS :</p>

<p><img src="http://localhost:4000/assets/images/post/sass-vs-scss.png" alt="SASS-2" /></p>

<p>terlihat perbedaannya bukan, SCSS akan lebih mudah dibaca dan dipahami bagi yang sudah terbiasa menggunakan syntax <code class="language-plaintext highlighter-rouge">CSS</code> untuk melakukan styling web.<br />
sedangkan <code class="language-plaintext highlighter-rouge">SASS</code> tidak familiar, butuh adaptasi lebih lagi dalam mempelajari <code class="language-plaintext highlighter-rouge">SASS</code> bagi awam seperti gout.</p>

<h4 id="selanjutnya">Selanjutnya</h4>
<p>setelah membuat direktori <code class="language-plaintext highlighter-rouge">sass/</code> dari diatas, kemudian kita membuat direktori untuk <code class="language-plaintext highlighter-rouge">css</code> gout menyimpan nya di <code class="language-plaintext highlighter-rouge">assets/css/</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p assets/css/
chmod 777 assets/css/.*
touch assets/css/styles.css
</code></pre></div></div>
<p>di SASS kalian tinggal buka satu file saja sebagai target styling, disini gout menggunakan file <code class="language-plaintext highlighter-rouge">SASS</code> di <code class="language-plaintext highlighter-rouge">sass/_layout.scss</code>.  sebelumnya buka file <code class="language-plaintext highlighter-rouge">sass/index.scss</code>, kemudian import tiap file sass yang akan di configurasi sebagai base styling.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//file index.scss
@import '_color.scss';
@import '_layout.scss';
</code></pre></div></div>
<p>kemudian buka file <code class="language-plaintext highlighter-rouge">sass/_layout.scss</code>, dan untuk memulai configurasi sass kalian, di sass ada fungsi <code class="language-plaintext highlighter-rouge">--watch</code> , kalian bisa lihat di dokumentasi sass <a href="https://sass-lang.com/guide">Doc(guide) SASS</a>. kita bisa menggunakan <code class="language-plaintext highlighter-rouge">--watch</code> ini untuk memonitor target untuk file <code class="language-plaintext highlighter-rouge">css</code> nya dimana dalam artikel ini file css gout ada di direktori <code class="language-plaintext highlighter-rouge">assets/css/styles.css</code>.<br />
buka terminal kembali :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sass --watch sass/index.scss:assets/css/styles.css
</code></pre></div></div>
<p><img src="http://localhost:4000/assets/images/post/sass-watch.png" alt="SASS-3" /></p>

<p>kemudian kita buka file <code class="language-plaintext highlighter-rouge">sass/_color.scss</code> dimana file ini kita fungsikan sebagai tempat menyimpan variable karena di <code class="language-plaintext highlighter-rouge">SASS</code> ini kalian bisa menambahkan variable untuk memudahkan format styling kita.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$heading1: firebrick;
$heading2: crimson;
</code></pre></div></div>
<p>setelah itu buka file <code class="language-plaintext highlighter-rouge">sass/_layout.scss</code> sekarang kita bisa gunakan <code class="language-plaintext highlighter-rouge">variable($)</code> dari file <code class="language-plaintext highlighter-rouge">sass/_color.scss</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h1, h2, h3{
	color: $heading1;
}  
h3, h4{
	color: $heading2;
}
</code></pre></div></div>
<p>dalam project kali ini gout menggunakan <code class="language-plaintext highlighter-rouge">Node.js</code>, di <code class="language-plaintext highlighter-rouge">Node.js</code> sepert ini konfigurasi <code class="language-plaintext highlighter-rouge">Node.js</code> gout :  gout menggunakan file <code class="language-plaintext highlighter-rouge">server.js</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//file = server.js
const http = require('http');
const fs = require('fs');
const path = require('path');

http.createServer(function (request, response) {
    console.log('request ', request.url);

    let filePath = '.' + request.url;

    if (filePath == './') {
        filePath = './views/index.html';
    }

    const extname = String(path.extname(filePath)).toLowerCase();
    const mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.wav': 'audio/wav',
        '.mp4': 'video/mp4',
        '.woff': 'application/font-woff',
        '.ttf': 'application/font-ttf',
        '.eot': 'application/vnd.ms-fontobject',
        '.otf': 'application/font-otf',
        '.wasm': 'application/wasm'
    };

    const contentType = mimeTypes[extname] || 'application/octet-stream';

    fs.readFile(filePath, function(error, content) {
        if (error) {
            if(error.code == 'ENOENT') {
                fs.readFile('./404.html', function(error, content) {
                    response.writeHead(404, { 'Content-Type': 'text/html' });

                    response.end(content, 'utf-8');
                });
            }
            else {
                response.writeHead(500);
                response.end('Sorry, check with the site admin for error: '+error.code+' ..\n');
            }
        }
        else {
            response.writeHead(200, { 'Content-Type': contentType });
            response.end(content, 'utf-8');
        }
    });

}).listen(5151);
console.log('Server running at http://127.0.0.1:5151/');
</code></pre></div></div>

<p>kemudian di file <code class="language-plaintext highlighter-rouge">views/index.html</code>, berikut isi file script html gout :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Testing SASS&lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="./assets/css/styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;

	&lt;h1&gt;I'm Using SASS in Node.js&lt;/h1&gt;
	&lt;h4&gt;Hello World SASS is Awesome&lt;/h4&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>
<p><img src="http://localhost:4000/assets/images/post/sass-test-2.png" alt="SASS-4" /></p>

<p>kurang lebih begini ketika dilakukan <code class="language-plaintext highlighter-rouge">--watch</code> pada file index.scss<br />
<img src="http://localhost:4000/assets/images/post/sass-test-1.png" alt="SASS-5" /></p>

<h4 id="kesimpulan-">kesimpulan !</h4>
<p>Bahwa dengan <strong>SASS</strong> ini kalian bisa melakukan apa yang tidak bisa dilakukan <strong><em>CSS</em></strong> seperti penggunaan <strong>$variable</strong>, kemudian <strong>Nested (bersarang)</strong> struktur di css.</p>

<p><img src="http://localhost:4000/assets/images/post/sass-test-2-1.png" alt="SASS-5" /><br />
<img src="http://localhost:4000/assets/images/post/sass-test-3.png" alt="SASS-6" /><br />
<img src="http://localhost:4000/assets/images/post/sass-test-4.png" alt="SASS-7" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// nested sass  
header{
	display:flex;
	align-content:center;
	margin-left:13rem;
h1{
		color:$heading1;
	}
}

h4{
	color:$heading2;
}
</code></pre></div></div>
<p>begitulah kelebihan menggunakan <strong>SASS</strong>, untuk selanjutnya kalian bisa eksplore juga, bisa lihat langsung ke documentasi resmi dari sass ini .</p>

<p>ok cukup sekian mengenai lanjutan artikel nodeJS kali ini, mudah-mudahan bermanfaat. nanti di artikel berikut nya gout akan membahas yang lain lagi mengenai Node.js.</p>

<p>akhir kata gout ucapkan â¦</p>

<p>wassalaam</p>

<p><strong><em>Puji Ermanto</em></strong></p>

:ET