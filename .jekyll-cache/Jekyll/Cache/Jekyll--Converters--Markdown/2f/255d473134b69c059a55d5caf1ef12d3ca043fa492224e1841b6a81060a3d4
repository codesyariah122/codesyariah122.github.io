I"•O<p><img src="http://localhost:4000/assets/images/post/python/python-sql.jpeg" alt="python1" /></p>

<h3 id="database-in-python">Database In Python</h3>
<p>masih melanjutkan artikel sebelumnya membahas python, artikel kali ini akan membahas mengenai akses dan operational data di python :<br />
dalam artikel kali ini gout menggunaan <strong><em>PyMySQL</em></strong> untuk menggunakan package tersebut kita harus menginstall package <strong>PyMySQL</strong> nya dulu.</p>

<h4 id="install-package">Install package</h4>
<p>langsung saja kita buka terminal untuk memulai installasi module package mysql di python kita :<br />
gout akan menggunaan module <code class="language-plaintext highlighter-rouge">mysql.connector</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 -m pip install mysql-connector
</code></pre></div></div>
<p><img src="http://localhost:4000/assets/images/post/python/pip-python.gif" alt="pythongif1" /></p>

<p>setelah proses installasi module selesai, kita bisa mulai menggunakan module tersebut di project python kita. untuk menggunakan module package kita bisa menambahkan tag seperti ini :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector
</code></pre></div></div>

<h2 id="mysqlconnector">MySQL.Connector</h2>
<p>sekarang kita mulai menggunakan module mysql.connector, untuk percobaan kita buat sebuah file untuk membuka sebuah koneksi ke database server, buat file baru dengan nama <code class="language-plaintext highlighter-rouge">conn.py</code>, berikut isi code nya :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd
	)

if cnx.is_connected():
	print("Berhasil terhubung ke server")

cnx.close()
</code></pre></div></div>
<p>untuk menjalankannya, kita gunakan perintah di cli(command line) seperti biasa <code class="language-plaintext highlighter-rouge">python &lt;namafile.py&gt;</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python conn.py
</code></pre></div></div>
<p>jika dijalankan code diatas, maka hasilnya seperti ini :</p>

<p><img src="http://localhost:4000/assets/images/post/python/conn-python.gif" alt="pythongif2" /></p>

<p>kode program kita berhasil terhubung ke server MySQL di localhost setelah di eksekusi oleh python.</p>

<p>sedikit penjelasan dari code diatas â€¦<br />
Dibaris pertama kita mengambil module dari python yang mana diartikel ini kita menggunakan module <code class="language-plaintext highlighter-rouge">mysql.connector</code>, kita gunakan perintah <code class="language-plaintext highlighter-rouge">import</code> untuk mengambil sebuah module di pyhton.<br />
**kemudian : **</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd
	)
</code></pre></div></div>
<p>di code tersebut kita membuat sebuah koneksi dengan memanggil fungsi <code class="language-plaintext highlighter-rouge">connect()</code> dengan parameter diantaranya <code class="language-plaintext highlighter-rouge">host, user dan password</code>, sebenarnya ada lagi beberapa parameter untuk module mysql.connector ini salah satunya adalah <code class="language-plaintext highlighter-rouge">database</code> yang digunakan untuk menentukan nama database yang akan kita gunakan di project kita.<br />
di baris paling bawah, atau baris terahir kita lakan validasi connection database kita, check connection database :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if cnx.is_connected():
	print("Berhasil terhubung ke server")
</code></pre></div></div>
<p>dan hasilnya kita print dengan string info yang berisi koneksi berhasil.<br />
selanjutnya kita akan mencoba membuat database dengan menggunakan module <code class="language-plaintext highlighter-rouge">mysql.connector</code>.</p>

<h3 id="membuat-database">Membuat Database</h3>
<p>sebelumnya kita sudah membuat sebuah objek untuk menampung nilai connect database, <code class="language-plaintext highlighter-rouge">cnx</code>.<br />
selain objek <code class="language-plaintext highlighter-rouge">cnx</code> kita akan membutuhkan satu objek lagi yaitu cursor, buat objek baru untuk cursor :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cursor = cnx.cursor()
</code></pre></div></div>
<p>jadi nanti untuk melakukan eksekusi sebuah <code class="language-plaintext highlighter-rouge">query</code> ita tinggal panggil sebuah method di module <code class="language-plaintext highlighter-rouge">mysql.connector</code> yaitu method <code class="language-plaintext highlighter-rouge">execute()</code> dengan parameter string query.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cursor.execute(sql)
</code></pre></div></div>
<p>ok selanjutnya kita akan buat file baru dengan nama <code class="language-plaintext highlighter-rouge">createDB.py</code>, berikut code lengkap dari <code class="language-plaintext highlighter-rouge">createDB.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd
	)

cursor = cnx.cursor()
cursor.execute("CREATE DATABASE {}".format(nama_db))

print("Database berhasil dibuat")
</code></pre></div></div>
<p>sama seperti penggunaan mysql di pemrograman lainnya, kita menggunakan baris-baris command untuk melakukan sebuah query di <code class="language-plaintext highlighter-rouge">MySQL</code>. code di atas bisa langsung kita eksekusi dengan menjalankannya di terminal(CLI(command line)) :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python createDB.py
</code></pre></div></div>
<p>seperti ini hasil code diatas jika di jalankan diterminal
<img src="http://localhost:4000/assets/images/post/python/create_db1.png" alt="python3" /></p>

<p>dan ini di UI phpmyadmin : 
<img src="http://localhost:4000/assets/images/post/python/create_db2.png" alt="python4" /></p>

<p>dengan itu berarti eksekusi code kita berhasil, dan database berhasil dibuat dari screenshoot di phpmyadmin tersebut terlihat ada database baru yang terdaftar.</p>

<h3 id="membuat-table">Membuat table</h3>
<p>Untuk membuat table di database yang baru kita buat, caranya masih sama dengan code sebelumnya kita tinggal gunakan perintah command SQL untuk melakukan sebuah query ke dalam method <code class="language-plaintext highlighter-rouge">execute()</code><br />
ubah dahulu bagian <code class="language-plaintext highlighter-rouge">connect()</code>, tambahkan parameter baru yaitu <code class="language-plaintext highlighter-rouge">database</code> untuk menentukan database mana yang akan digunakan:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)
</code></pre></div></div>
<p>pada kode diatas kita menambahkan satu parameter baru untuk menentukan nama database yang akan kita gunakan sehingga menjadi seperti ini parameter lengkap untuk method <code class="language-plaintext highlighter-rouge">connect()</code> :  <code class="language-plaintext highlighter-rouge">nama_db = 'nama_ular'</code> <code class="language-plaintext highlighter-rouge">database = nama_db</code>. jadi kita bisa buat sebuah file baru, gout beri nama file nya <code class="language-plaintext highlighter-rouge">createTable.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># nama file = createTable.py
import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = """CREATE TABLE {} (
	id_ular INT AUTO_INCREMENT PRIMARY KEY,
	nama_ular VARCHAR(255),
	nama_latin VARCHAR(255)
)
"""

cursor.execute(sql.format(nama_tb))

print("Table ular_berbisa berhasil dibuat")
</code></pre></div></div>
<p>setelah itu kita bisa langsung eksekusi code programmnya :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python createTable.py
</code></pre></div></div>
<p>seperti ini hasilnya program python di terminal kita :</p>

<p><img src="http://localhost:4000/assets/images/post/python/create_tb1.png" alt="python5" /></p>

<p>dan ini di phpmyadmin:</p>

<p><img src="http://localhost:4000/assets/images/post/python/create_tb2.png" alt="python6" /></p>

<p>kita sudah berhasil membuat sebuah table baru di database kita menggunaan module <code class="language-plaintext highlighter-rouge">mysql.connector</code> di python.</p>

<h3 id="insert-data">Insert data</h3>

<p>Sebelumnya kita telah membuat sebuah table baru, sekarang kita akan mencoba untu menjalankan QUERY SQL untuk menambahan  data baru ke database kita, caranya masih sama, menggunaan command SQL.<br />
buat satu file baru lagi , gout kasih nama file nya <code class="language-plaintext highlighter-rouge">insertDB.py</code>, kalian bebas memberi nama filenya. berikut isi dari file <code class="language-plaintext highlighter-rouge">insertDB.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		passwd = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "INSERT INTO {} (nama_ular, nama_latin) VALUES (%s, %s)".format(nama_tb)

val = ("King Cobra", "Ophiophagus hannah")

cursor.execute(sql, val)


cnx.commit()

print("{} data ditambahkan ".format(cursor.rowcount))
</code></pre></div></div>
<p>Langsung kita jalankan codenya di terminal kita :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python insertDB.py
</code></pre></div></div>
<p>begini hasilnya di terminal :<br />
<img src="http://localhost:4000/assets/images/post/python/insert_tb1.png" alt="python6" /></p>

<p>di phpmyadmin sepert ini hasilnya :<br />
<img src="http://localhost:4000/assets/images/post/python/insert_tb2.png" alt="python7" /></p>

<p><strong><em>penjelasan:</em></strong><br />
sedikit penjelasan: perhatikan baris code yang kita gunakan untuk melakukan query insert data:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sql = "INSERT INTO {} (nama_ular, nama_latin) VALUES (%s, %s)".format(nama_tb)

val = ("King Cobra", "Ophiophagus hannah")

cursor.execute(sql, val)


cnx.commit()
</code></pre></div></div>
<p>Di code tersebut kita menggunakan <code class="language-plaintext highlighter-rouge">%s</code> sebagai placeholder untuk mengisi query insert parameter value di sqlnya.<br />
teknik ini sangat berguna untuk menghindari <code class="language-plaintext highlighter-rouge">SQL Injection</code> dan juga membuat penulisan code kita lebih clean dan mudah untuk di baca. kemudian di code berikutnya atau di bawahnya kita laukan <code class="language-plaintext highlighter-rouge">cnx.commit()</code> code ini dimaksudkan guna untuk menyimpan data yang kita insertkan, method <code class="language-plaintext highlighter-rouge">commit()</code> juga biasa digunakan untuk diantaranya : update data, dan hapus data.</p>

<p><em>**Menambahkan beberapa data sekaligus : **</em><br />
buat sebuah file baru sebagai contoh, disini kita akan menginsert beberapa data dalam satu eksekusi. gout buat sebuah file baru sebagai contoh gout beri nama <code class="language-plaintext highlighter-rouge">insertMany.py</code> :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		passwd = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "INSERT INTO {} (nama_ular, nama_latin) VALUES (%s, %s)".format(nama_tb)

values = [
		("Mamba Hitam", "Dendroaspis polylepis"),
		("Viper Bertanduk", "Cerastes cerastes")
		]

for val in values:
	cursor.execute(sql, val)
	cnx.commit()

print("{} data ditambahkan ".format(len(values)))
</code></pre></div></div>
<p>kemudian jalankan kembali di teminal file <code class="language-plaintext highlighter-rouge">python insertMany.py</code></p>

<p>Dan seperti ini hasilnya di terminal :<br />
<img src="http://localhost:4000/assets/images/post/python/insert_many1.png" alt="python6" /></p>

<p>di phpmyadmin sepert ini hasilnya :<br />
<img src="http://localhost:4000/assets/images/post/python/insert_many2.png" alt="python7" /></p>

<h3 id="menampilkan-data">Menampilkan data</h3>
<p>Judul selanjutnya ini adalah menampilkan data, masih menggunaan query MySQL dengan command <code class="language-plaintext highlighter-rouge">SELECT</code>. kita bisa ambil beberapa data dengan method :</p>
<li>fetchall() untuk menampilkan seluruh data</li>
<li>fetchmany(5) untuk menampilkan lima data</li>
<li>fetchone() untuk menampilkan satu data pertama saja.</li>

<p>Method <code class="language-plaintext highlighter-rouge">fetchall(), fetchmany(), fetchone()</code> aan mengembalikan sebuah data list yang berisi tupple. 
ok kita coba buat satu file baru lagi, gout beri nama file nya <code class="language-plaintext highlighter-rouge">selectData.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "SELECT * FROM {}".format(nama_tb)

cursor.execute(sql)

results = cursor.fetchall()

for data in results:
	print(data)

cnx.close()
</code></pre></div></div>
<p>Seperti biasa kita eksekusi lagi lewat terminal untuk menjalankannya.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python selectData.py
</code></pre></div></div>
<p>Dan seperti ini hasilnya di terminal :<br />
<img src="http://localhost:4000/assets/images/post/python/select_data1.png" alt="python8" /></p>

<p>Selanjutnya kita akan mencoba menggunaan method <code class="language-plaintext highlighter-rouge">fetchone()</code>, untuk mengambil satu data saja. buat file baru lagi dengan nama <code class="language-plaintext highlighter-rouge">selectOne.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "SELECT * FROM {}".format(nama_tb)

cursor.execute(sql)

results = cursor.fetchone()

print(results)

# for data in results:
# 	print(data)

cnx.close()
</code></pre></div></div>
<p>Dan seperti ini hasilnya di terminal :<br />
<img src="http://localhost:4000/assets/images/post/python/select_data2.png" alt="python9" /></p>

<p>Untuk method select data lainnya, coders bisa coba sendiri, diantaranya ada <code class="language-plaintext highlighter-rouge">fetchmany() dan fetchall()</code>.</p>

<h3 id="update-data">Update data</h3>
<p>Di judul ini kita akan mencoba mengubah sebuah data, caranya pun masih sama dengan script sebelum-sebelumnya. Masih menggunakan command SQL, kali ini kita akan melakukan query <code class="language-plaintext highlighter-rouge">UPDATE</code>. 
ok langsung saja kita buat file baru, gout beri nama <code class="language-plaintext highlighter-rouge">updateData.py</code> :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "UPDATE {} SET nama_ular=%s, nama_latin=%s WHERE id_ular=%s".format(nama_tb)
val = ("Mamba Hijau", "Dendroaspis angusticeps", 3)
cursor.execute(sql, val)

cnx.commit()

print("{} data diupdate".format(cursor.rowcount))

cnx.close()
</code></pre></div></div>
<p>di code tersebut gout melakukan update data untuk sebuah id :
<code class="language-plaintext highlighter-rouge">WHERE id_ular=</code> karena di variable selanjutnya yaitu <em>**val = **</em> gout memberikan nilai seperti ini <code class="language-plaintext highlighter-rouge">val = ("Mamba Hijau", "Dendroaspis angusticeps", 3)</code>, dengan itu gout melakukan update untuk data dengan <code class="language-plaintext highlighter-rouge">ular_id=3</code>.<br />
Dan seperti ini hasilnya di terminal :<br />
<img src="http://localhost:4000/assets/images/post/python/update_data1.png" alt="python10" /><br />
dan di phpmyadminnya :<br />
<img src="http://localhost:4000/assets/images/post/python/update_data2.png" alt="python11" /></p>

<p>selanjutnya â€¦</p>

<h3 id="hapus-data">Hapus data</h3>
<p>Untuk menjalankan hapus data kurang lebih sama, masih menggunakan query SQL kali ini kita akan gunakan comman <code class="language-plaintext highlighter-rouge">DELETE</code> untuk menghapus data dan <code class="language-plaintext highlighter-rouge">WHERE</code> untuk menentukan data mana yang akan kita hapus disini gout menggunakan <code class="language-plaintext highlighter-rouge">WHERE</code> berdasarkan id yang akan dihapus.<br />
kita buat file baru dengan nama <code class="language-plaintext highlighter-rouge">deleteData.py</code>, seperti ini code nya :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import mysql.connector

host = 'localhost'
user = 'root'
passwd = '1'
nama_db = 'nama_ular'
nama_tb = 'ular_berbisa'

cnx = mysql.connector.connect(
		host = host,
		user = user,
		password = passwd,
		database = nama_db
	)

cursor = cnx.cursor()

sql = "DELETE FROM {} WHERE id_ular=%s".format(nama_tb)

val = (3,)

cursor.execute(sql, val)

cnx.commit()

print("{} data dihapus ".format(cursor.rowcount))

cnx.close()
</code></pre></div></div>
<p>dari code diatas gout melakukan delete data berdasarkan <code class="language-plaintext highlighter-rouge">id_ular = 3</code>.</p>

<p><img src="http://localhost:4000/assets/images/post/python/delete_data1.png" alt="python12" /></p>

<p>dan di phpmyadminnya :<br />
<img src="http://localhost:4000/assets/images/post/python/delete_data2.png" alt="python13" /><br />
data dengan <code class="language-plaintext highlighter-rouge">id_ular = 3</code> berhasil dihapus.</p>

<p>sampai disini mungin kesimpulannya, pemrograman python ini tidak jauh berbeda dengan php, yang sebelumny gout gunakan dalam beberapa project gout dan di kerjaan utama gout. makanya gout tertarik dalam mempelajari dan menggunakan python untuk project gout selanjutnya.</p>

<p>Ok sekian dulu artikel mengenai operational database di Python kali ini, inshaallah nanti gout sambung lagi membahas mengenai python, di artikel selanjut-lanjutnya.</p>

<p>akhir kata gout ucapkan terima kasih, jangan lupa jaga selalu kesehatan kita. Salam sukses selalu. Aamiin.</p>

<p><strong>Wassalam</strong></p>

<p>By. Puji Ermanto</p>

:ET